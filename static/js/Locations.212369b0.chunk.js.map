{"version":3,"file":"static/js/Locations.212369b0.chunk.js","mappings":"mPACA,EAA0B,2BAA1B,EAA4D,wBAA5D,EAA6F,0BAA7F,EAA6H,uBAA7H,EAA6J,0BAA7J,EAA8L,wBAA9L,EAA8N,yB,SCgG9N,EAxFsB,WACpB,OAA0DA,EAAAA,EAAAA,IAAeC,EAAAA,IAAjEC,EAAQ,EAARA,SAAUC,EAAS,EAATA,UAAWC,EAAgB,EAAhBA,iBAAkBC,EAAM,EAANA,OACzCC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIL,GAEZ,IAAMM,EAAgBP,EAAUQ,KAAI,SAACC,GAAG,OAAK,SAAC,MAAI,UAAkBA,GAAZA,EAAIC,GAAe,IACrEC,GAAY,OAAI,IAAIC,MAAM,KAAKJ,KAAI,SAACK,EAAGC,GAAK,OAChD,SAAC,KAAQ,GAAMA,EAAS,IAGpBC,GAAkB,OAAI,IAAIH,MAAM,KAAKJ,KAAI,SAACK,EAAGC,GAAK,OACtD,SAAC,KAAe,GAAMA,EAAS,KAGjCE,EAAAA,EAAAA,YAAU,WACRb,GAASc,EAAAA,EAAAA,IAAelB,EAASW,KACjCP,GAASe,EAAAA,EAAAA,OACTC,OAAOC,SAAS,EAAG,EAErB,GAAG,CAACjB,EAAUJ,EAASW,KAOvB,OACE,oBAASW,UAAWC,EAAe,UACjC,gBAAKD,UAAU,YAAW,UACxB,gBAAKA,UAAWC,EAAY,UAC1B,iBAAKD,UAAWC,EAAW,WACzB,iBAAKD,UAAWC,EAAc,WAC5B,iBAAKD,UAAWC,EAAY,WAC1B,SAAC,KAAW,CAACC,KAAM,OAAQC,SAAkB,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAUwB,QAC/C,SAAC,KAAW,CAACA,KAAM,OAAQC,SAAkB,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAU0B,QAC/C,SAAC,KAAW,CAACF,KAAM,YAAaC,SAAkB,OAARzB,QAAQ,IAARA,OAAQ,EAARA,EAAU2B,gBA6BtD,2BACE,0BAAM,cACLxB,IAAWyB,EAAAA,EAAAA,QAAiBZ,EAAkBd,EAAiBO,KAAI,SAACoB,GAAI,OACvE,eAEEC,QAAS,kBAhDCnB,EAgDwBkB,EAAKlB,GA/CvDP,GAASc,EAAAA,EAAAA,IAAeP,SACxBS,OAAOC,SAAS,EAAG,GAFM,IAACV,CAgDgC,EAC1CW,UAAWtB,EAASwB,OAASK,EAAKL,KAAOD,EAAgB,GAAG,SAE3DM,EAAKL,MAJDK,EAAKlB,GAKP,WAKX,gBAAKW,UAAWC,EAAa,SAC1BpB,IAAWyB,EAAAA,EAAAA,QAAiBhB,EAAYJ,YAOvD,C","sources":["webpack://react-rickandmorty/./src/pages/Locations/Locations.module.scss?9669","pages/Locations/Locations.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Locations_section__wQyrU\",\"root\":\"Locations_root__p711A\",\"active\":\"Locations_active__-3DOZ\",\"row\":\"Locations_row__V4f0n\",\"column\":\"Locations_column__YNnL1\",\"info\":\"Locations_info__F3AoP\",\"items\":\"Locations_items__9GFGZ\"};","import React, { FC, useEffect } from 'react'\nimport { Card, Skeleton, NameSidebar, SkeletonSidebar } from '../../components'\n\nimport { fetchLocations, fetchLocationsSidebar, selectorLocations } from '../../redux/asyncLocations'\nimport { Status } from '../../redux/character/types'\nimport { useAppDispatch, useAppSelector } from '../../redux/store'\n\nimport styles from './Locations.module.scss'\n\nconst Locations: FC = () => {\n  const { location, residents, locationsSidebar, status } = useAppSelector(selectorLocations)\n  const dispatch = useAppDispatch()\n  console.log(locationsSidebar);\n\n  const residentsCard = residents.map((obj) => <Card key={obj.id} {...obj} />)\n  const skeletons = [...new Array(20)].map((_, index) => (\n    <Skeleton key={index} />\n  ))\n\n  const skeletonSidebar = [...new Array(40)].map((_, index) => (\n    <SkeletonSidebar key={index} />\n  ))\n\n  useEffect(() => {\n    dispatch(fetchLocations(location.id))\n    dispatch(fetchLocationsSidebar())\n    window.scrollTo(0, 0)\n\n  }, [dispatch, location.id])\n\n  const handleNameLocation = (id: number) => {\n    dispatch(fetchLocations(id))\n    window.scrollTo(0, 0)\n  }\n\n  return (\n    <section className={styles.section}>\n      <div className='container'>\n        <div className={styles.root}>\n          <div className={styles.row}>\n            <div className={styles.column}>\n              <div className={styles.info}>\n                <NameSidebar name={'Name'} children={location?.name} />\n                <NameSidebar name={'Type'} children={location?.type} />\n                <NameSidebar name={'Dimension'} children={location?.dimension} />\n                {/* <div>\n                 <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                      `Name: ${location?.name}`\n                    )}\n                 </span>\n                </div>\n                <div>\n                  <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                        `Type: ${location?.type}`\n                    )}\n                  </span>\n                </div>\n                <div>\n                  <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                        `Demission: ${location?.dimension}`\n                    )}\n                  </span>\n                </div> */}\n              </div>\n              <ul>\n                <span>Locations</span>\n                {status === Status.LOADING ? skeletonSidebar : locationsSidebar.map((item) => (\n                  <li\n                    key={item.id}\n                    onClick={() => handleNameLocation(item.id)}\n                    className={location.name === item.name ? styles.active : ''}\n                  >\n                    {item.name}\n                  </li>\n                ))}\n\n              </ul>\n            </div>\n            <div className={styles.items}>\n              {status === Status.LOADING ? skeletons : residentsCard}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Locations\n"],"names":["useAppSelector","selectorLocations","location","residents","locationsSidebar","status","dispatch","useAppDispatch","console","log","residentsCard","map","obj","id","skeletons","Array","_","index","skeletonSidebar","useEffect","fetchLocations","fetchLocationsSidebar","window","scrollTo","className","styles","name","children","type","dimension","Status","item","onClick"],"sourceRoot":""}