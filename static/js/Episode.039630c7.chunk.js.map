{"version":3,"file":"static/js/Episode.039630c7.chunk.js","mappings":"6PACA,EAA0B,yBAA1B,EAA0D,sBAA1D,EAAyF,wBAAzF,EAAuH,qBAAvH,EAAqJ,wBAArJ,EAAoL,sBAApL,EAAkN,uBAAlN,EAAiP,uB,SCqGjP,EAxFqB,WACnB,OACEA,EAAAA,EAAAA,IAAYC,EAAAA,IADNC,EAAO,EAAPA,QAASC,EAAe,EAAfA,gBAAiBC,EAAU,EAAVA,WAAYC,EAAM,EAANA,OAGxCC,GAAWC,EAAAA,EAAAA,MAEXC,EAAiBJ,EAAWK,KAAI,SAACC,GAAG,OAAK,SAAC,MAAI,UAAkBA,GAAZA,EAAIC,GAAe,IACvEC,GAAY,OAAI,IAAIC,MAAM,KAAKJ,KAAI,SAACK,EAAGC,GAAK,OAChD,SAAC,KAAQ,GAAMA,EAAS,IAGpBC,GAAkB,OAAI,IAAIH,MAAM,KAAKJ,KAAI,SAACK,EAAGC,GAAK,OACtD,SAAC,KAAe,GAAMA,EAAS,KAGjCE,EAAAA,EAAAA,YAAU,WACRX,GAASY,EAAAA,EAAAA,OACTZ,GAASa,EAAAA,EAAAA,IAAajB,EAAQS,KAC9BS,OAAOC,SAAS,EAAG,EACrB,GAAG,CAACf,EAAUJ,EAAQS,KAOtB,OACE,oBAASW,UAAWC,EAAe,UACjC,gBAAKD,UAAU,YAAW,UACxB,gBAAKA,UAAWC,EAAY,UAC1B,iBAAKD,UAAWC,EAAW,WACzB,iBAAKD,UAAWC,EAAc,WAC5B,iBAAKD,UAAWC,EAAY,WAC1B,0BACE,0BACGlB,IAAWmB,EAAAA,EAAAA,SACV,SAAC,KAAe,IAAG,gBAEH,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASuB,WAIxB,0BACE,0BACGpB,IAAWmB,EAAAA,EAAAA,SACV,SAAC,KAAe,IAAG,mBAEA,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASuB,WAI3B,0BACE,0BACGpB,IAAWmB,EAAAA,EAAAA,SACV,SAAC,KAAe,IAAG,gBAEH,OAAPtB,QAAO,IAAPA,OAAO,EAAPA,EAASwB,kBAK1B,2BACE,gBAAKJ,UAAWC,EAAa,SAAC,aAC7BlB,IAAWmB,EAAAA,EAAAA,QACRR,EACAb,EAAgBM,KAAI,SAACkB,GAAI,OACvB,eAEEC,QAAS,kBA/CJjB,EA+C4BgB,EAAKhB,GA9C1DL,GAASa,EAAAA,EAAAA,IAAaR,SACtBS,OAAOC,SAAS,EAAG,GAFK,IAACV,CA+CoC,EACzCW,UACEpB,EAAQuB,OAASE,EAAKF,KAAOF,EAAgB,GAC9C,SAEAI,EAAKF,MANDE,EAAKhB,GAOP,WAIf,gBAAKW,UAAWC,EAAa,SAC1BlB,IAAWmB,EAAAA,EAAAA,QAAiBZ,EAAYJ,YAOvD,C","sources":["webpack://react-rickandmorty/./src/pages/Episodes/Episode.module.scss?a625","pages/Episodes/Episodes.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Episode_section__gN7zc\",\"root\":\"Episode_root__oZ2f5\",\"active\":\"Episode_active__9GUU8\",\"row\":\"Episode_row__5b6bk\",\"column\":\"Episode_column__Jis1u\",\"info\":\"Episode_info__BoXIZ\",\"title\":\"Episode_title__K9Kh3\",\"items\":\"Episode_items__ahgKm\"};","import React, { FC, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Card, Skeleton, SkeletonSidebar } from '../../components'\n\nimport {\n  fetchEpisode,\n  fetchEpisodesSidebar,\n  selectEpisodes,\n} from '../../redux/asyncEpisode'\nimport { Status } from '../../redux/character/types'\nimport { useAppDispatch } from '../../redux/store'\nimport styles from './Episode.module.scss'\n\nconst Episodes: FC = () => {\n  const { episode, episodesSidebar, characters, status } =\n    useSelector(selectEpisodes)\n\n  const dispatch = useAppDispatch()\n\n  const charactersCard = characters.map((obj) => <Card key={obj.id} {...obj} />)\n  const skeletons = [...new Array(20)].map((_, index) => (\n    <Skeleton key={index} />\n  ))\n\n  const skeletonSidebar = [...new Array(40)].map((_, index) => (\n    <SkeletonSidebar key={index} />\n  ))\n\n  useEffect(() => {\n    dispatch(fetchEpisodesSidebar())\n    dispatch(fetchEpisode(episode.id))\n    window.scrollTo(0, 0)\n  }, [dispatch, episode.id])\n\n  const handleNameEpisode = (id: number) => {\n    dispatch(fetchEpisode(id))\n    window.scrollTo(0, 0)\n  }\n\n  return (\n    <section className={styles.section}>\n      <div className='container'>\n        <div className={styles.root}>\n          <div className={styles.row}>\n            <div className={styles.column}>\n              <div className={styles.info}>\n                <div>\n                  <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                      `Name: ${episode?.name}`\n                    )}\n                  </span>\n                </div>\n                <div>\n                  <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                      `Episode: ${episode?.name}`\n                    )}\n                  </span>\n                </div>\n                <div>\n                  <span>\n                    {status === Status.LOADING ? (\n                      <SkeletonSidebar />\n                    ) : (\n                      `Data: ${episode?.air_date}`\n                    )}\n                  </span>\n                </div>\n              </div>\n              <ul>\n                <div className={styles.title}>Episodes</div>\n                {status === Status.LOADING\n                  ? skeletonSidebar\n                  : episodesSidebar.map((item) => (\n                      <li\n                        key={item.id}\n                        onClick={() => handleNameEpisode(item.id)}\n                        className={\n                          episode.name === item.name ? styles.active : ''\n                        }\n                      >\n                        {item.name}\n                      </li>\n                    ))}\n              </ul>\n            </div>\n            <div className={styles.items}>\n              {status === Status.LOADING ? skeletons : charactersCard}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Episodes\n"],"names":["useSelector","selectEpisodes","episode","episodesSidebar","characters","status","dispatch","useAppDispatch","charactersCard","map","obj","id","skeletons","Array","_","index","skeletonSidebar","useEffect","fetchEpisodesSidebar","fetchEpisode","window","scrollTo","className","styles","Status","name","air_date","item","onClick"],"sourceRoot":""}